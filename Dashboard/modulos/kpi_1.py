import pandas as pd
import plotly.express as px
import streamlit as st
import warnings

warnings.filterwarnings('ignore')

def display():
    st.title("游늵 KPI 1 - Incremento en el Acceso a Internet")
    st.markdown("""
    ### Descripci칩n
    Este KPI mide el crecimiento proyectado del acceso a internet en hogares por provincia, evaluando la meta de un incremento del 2% en el pr칩ximo trimestre.
    
    ### An치lisis
    - **Acceso Actual**: Representa el n칰mero de accesos totales en el 칰ltimo trimestre del a침o m치s reciente disponible.
    - **Acceso Proyectado**: Calcula el n칰mero de accesos si se logra un incremento del 2% sobre el acceso actual.
    - **An치lisis por Regi칩n**: Se agrupan las provincias en regiones para observar tendencias y patrones en la conectividad.
    """)

    # Cargar el archivo Parquet de accesos a internet procesado
    accesos_internet = pd.read_parquet('notebooks\data\processed\internet_accesos_tecnologia.parquet')

    # Agrupar por provincia y trimestre para obtener la suma de accesos por trimestre en cada provincia
    accesos_provincia = accesos_internet.groupby(['Provincia', 'A침o', 'Trimestre'])['Total'].sum().reset_index()

    # Filtrar el 칰ltimo trimestre disponible
    ultimo_ano = accesos_provincia['A침o'].max()
    ultimo_trimestre = accesos_provincia[accesos_provincia['A침o'] == ultimo_ano]['Trimestre'].max()
    accesos_ultimo_trimestre = accesos_provincia[
        (accesos_provincia['A침o'] == ultimo_ano) & (accesos_provincia['Trimestre'] == ultimo_trimestre)
    ].copy()

    # Calcular el acceso proyectado con un incremento del 2%
    accesos_ultimo_trimestre['Nuevo Acceso'] = accesos_ultimo_trimestre['Total'] * 1.02

    # Calcular el KPI de incremento en porcentaje para cada provincia
    accesos_ultimo_trimestre['KPI Incremento (%)'] = ((accesos_ultimo_trimestre['Nuevo Acceso'] - accesos_ultimo_trimestre['Total']) / accesos_ultimo_trimestre['Total']) * 100

    # Ordenar el DataFrame por el n칰mero de accesos actuales de menor a mayor
    accesos_ultimo_trimestre_sorted = accesos_ultimo_trimestre.sort_values(by='Total')

    # Gr치fico 1: Comparaci칩n de Acceso Actual y Proyectado por Provincia
    st.subheader("游늵 Comparaci칩n por Provincia")
    fig1 = px.bar(
        accesos_ultimo_trimestre_sorted,
        x="Provincia",
        y=["Total", "Nuevo Acceso"],
        labels={"value": "N칰mero de Accesos", "variable": "Tipo de Acceso"},
        barmode="group",
        title="Comparaci칩n de Acceso Actual y Proyectado a Internet en Hogares por Provincia"
    )

    # Ajustar la escala del eje Y
    fig1.update_layout(
        yaxis=dict(
            title="N칰mero de Accesos (Escala Logar칤tmica)",
            type="log",
            range=[5, 8]  # Ajusta los valores para la escala logar칤tmica
        ),
        xaxis=dict(
            title="Provincia"
        ),
        legend=dict(title="Tipo de Acceso")
    )
    st.plotly_chart(fig1, use_container_width=True)

    # An치lisis por regi칩n
    st.subheader("游늸 An치lisis por Regi칩n")
    provincias_regiones = {
        'Buenos Aires': 'Buenos Aires y CABA',
        'CABA': 'Buenos Aires y CABA',
        'Catamarca': 'NOA',
        'Jujuy': 'NOA',
        'La Rioja': 'NOA',
        'Salta': 'NOA',
        'Santiago del Estero': 'NOA',
        'Tucum치n': 'NOA',
        'Chaco': 'NEA',
        'Corrientes': 'NEA',
        'Formosa': 'NEA',
        'Misiones': 'NEA',
        'C칩rdoba': 'Centro',
        'Entre R칤os': 'Centro',
        'Santa Fe': 'Centro',
        'Chubut': 'Patagonia',
        'La Pampa': 'Patagonia',
        'Neuqu칠n': 'Patagonia',
        'R칤o Negro': 'Patagonia',
        'Santa Cruz': 'Patagonia',
        'Tierra del Fuego': 'Patagonia',
        'Mendoza': 'Cuyo',
        'San Juan': 'Cuyo',
        'San Luis': 'Cuyo'
    }

    # A침adir columna de regi칩n al DataFrame
    accesos_ultimo_trimestre_sorted['Regi칩n'] = accesos_ultimo_trimestre_sorted['Provincia'].map(provincias_regiones)

    # Calcular el acceso promedio de internet por regi칩n
    acceso_promedio_region = accesos_ultimo_trimestre_sorted.groupby('Regi칩n')['Total'].mean().reset_index()

    # Gr치fico 2: Acceso Promedio de Internet por Regi칩n
    fig2 = px.bar(
        acceso_promedio_region,
        x='Regi칩n',
        y='Total',
        labels={"Total": "N칰mero Promedio de Accesos", "Regi칩n": "Regi칩n"},
        title="Acceso Promedio de Internet por Regi칩n",
        color='Total',  # Colores basados en el valor
        color_continuous_scale='viridis'  # Cambiar la escala de color
    )

    fig2.update_layout(
        yaxis=dict(
            title="N칰mero Promedio de Accesos (Escala Logar칤tmica)",
            type="log",
            range=[5, 8]  # Ajustar el rango si es necesario
        ),
        xaxis=dict(
            title="Regi칩n"
        )
    )
    st.plotly_chart(fig2, use_container_width=True)

